
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.19;

contract Project {
    
    // Struct to represent a candidate
    struct Candidate {
        uint256 id;
        string name;
        uint256 voteCount;
        bool exists;
    }
    
    // Struct to represent a voting session
    struct VotingSession {
        string title;
        uint256 startTime;
        uint256 endTime;
        bool isActive;
        uint256 totalVotes;
    }
    
    // State variables
    address public owner;
    VotingSession public currentSession;
    mapping(uint256 => Candidate) public candidates;
    mapping(address => bool) public hasVoted;
    mapping(address => bool) public authorizedVoters;
    uint256 public candidateCount;
    uint256[] public candidateIds;
    
    // Events
    event VotingSessionCreated(string title, uint256 startTime, uint256 endTime);
    event CandidateAdded(uint256 indexed candidateId, string name);
    event VoteCast(address indexed voter, uint256 indexed candidateId);
    event VotingSessionEnded(string title, uint256 totalVotes);
    
    // Modifiers
    modifier onlyOwner() {
        require(msg.sender == owner, "Only owner can perform this action");
        _;
    }
    
    modifier onlyAuthorizedVoter() {
        require(authorizedVoters[msg.sender], "You are not authorized to vote");
        _;
    }
    
    modifier votingActive() {
        require(currentSession.isActive, "No active voting session");
        require(block.timestamp >= currentSession.startTime, "Voting has not started yet");
        require(block.timestamp <= currentSession.endTime, "Voting has ended");
        _;
    }
    
    constructor() {
        owner = msg.sender;
    }
    
    /**
     * @dev Core Function 1: Create a new voting session with candidates
     * @param _title Title of the voting session
     * @param _duration Duration of voting in seconds
     * @param _candidateNames Array of candidate names
     */
    function createVotingSession(
        string memory _title,
        uint256 _duration,
        string[] memory _candidateNames
    ) public onlyOwner {
        require(!currentSession.isActive, "A voting session is already active");
        require(_candidateNames.length > 1, "At least 2 candidates required");
        require(_duration > 0, "Duration must be greater than 0");
        
        // Reset previous session data
        _resetSessionData();
        
        // Create new voting session
        currentSession = VotingSession({
            title: _title,
            startTime: block.timestamp,
            endTime: block.timestamp + _duration,
            isActive: true,
            totalVotes: 0
        });
        
        // Add candidates
        for (uint256 i = 0; i < _candidateNames.length; i++) {
            candidateCount++;
            candidates[candidateCount] = Candidate({
                id: candidateCount,
                name: _candidateNames[i],
                voteCount: 0,
                exists: true
            });
            candidateIds.push(candidateCount);
            emit CandidateAdded(candidateCount, _candidateNames[i]);
        }
        
        emit VotingSessionCreated(_title, currentSession.startTime, currentSession.endTime);
    }
    
    /**
     * @dev Core Function 2: Cast a vote for a candidate
     * @param _candidateId ID of the candidate to vote for
     */
    function castVote(uint256 _candidateId) public onlyAuthorizedVoter votingActive {
        require(!hasVoted[msg.sender], "You have already voted");
        require(candidates[_candidateId].exists, "Candidate does not exist");
        
        // Record the vote
        hasVoted[msg.sender] = true;
        candidates[_candidateId].voteCount++;
        currentSession.totalVotes++;
        
        emit VoteCast(msg.sender, _candidateId);
    }
    
    /**
     * @dev Core Function 3: Get voting results and determine winner
     * @return winnerName Name of the winning candidate
     * @return winnerVotes Number of votes received by winner
     * @return totalVotes Total votes cast in the session
     */
    function getVotingResults() public view returns (
        string memory winnerName,
        uint256 winnerVotes,
        uint256 totalVotes
    ) {
        require(candidateCount > 0, "No candidates in current session");
        
        uint256 maxVotes = 0;
        uint256 winnerId = 0;
        
        // Find candidate with most votes
        for (uint256 i = 0; i < candidateIds.length; i++) {
            uint256 candidateId = candidateIds[i];
            if (candidates[candidateId].voteCount > maxVotes) {
                maxVotes = candidates[candidateId].voteCount;
                winnerId = candidateId;
            }
        }
        
        if (winnerId > 0) {
            winnerName = candidates[winnerId].name;
            winnerVotes = candidates[winnerId].voteCount;
        }
        
        totalVotes = currentSession.totalVotes;
    }
    
    // Additional utility functions
    
    /**
     * @dev Authorize a voter to participate in voting
     * @param _voter Address of the voter to authorize
     */
    function authorizeVoter(address _voter) public onlyOwner {
        authorizedVoters[_voter] = true;
    }
    
    /**
     * @dev Authorize multiple voters at once
     * @param _voters Array of voter addresses to authorize
     */
    function authorizeMultipleVoters(address[] memory _voters) public onlyOwner {
        for (uint256 i = 0; i < _voters.length; i++) {
            authorizedVoters[_voters[i]] = true;
        }
    }
    
    /**
     * @dev End the current voting session
     */
    function endVotingSession() public onlyOwner {
        require(currentSession.isActive, "No active voting session");
        currentSession.isActive = false;
        emit VotingSessionEnded(currentSession.title, currentSession.totalVotes);
    }
    
    /**
     * @dev Get all candidates with their vote counts
     */
    function getAllCandidates() public view returns (
        uint256[] memory ids,
        string[] memory names,
        uint256[] memory votes
    ) {
        uint256 length = candidateIds.length;
        ids = new uint256[](length);
        names = new string[](length);
        votes = new uint256[](length);
        
        for (uint256 i = 0; i < length; i++) {
            uint256 candidateId = candidateIds[i];
            ids[i] = candidates[candidateId].id;
            names[i] = candidates[candidateId].name;
            votes[i] = candidates[candidateId].voteCount;
        }
    }
    
    /**
     * @dev Internal function to reset session data
     */
    function _resetSessionData() internal {
        // Reset candidate data
        for (uint256 i = 0; i < candidateIds.length; i++) {
            delete candidates[candidateIds[i]];
        }
        delete candidateIds;
        candidateCount = 0;
        
        // Note: hasVoted mapping is intentionally not reset to prevent double voting across sessions
        // If you want to allow re-voting in new sessions, you'd need to implement a more complex system
    }
    
    /**
     * @dev Get current session info
     */
    function getCurrentSessionInfo() public view returns (
        string memory title,
        uint256 startTime,
        uint256 endTime,
        bool isActive,
        uint256 totalVotes,
        bool hasCurrentUserVoted
    ) {
        return (
            currentSession.title,
            currentSession.startTime,
            currentSession.endTime,
            currentSession.isActive,
            currentSession.totalVotes,
            hasVoted[msg.sender]
        );
    }
}
